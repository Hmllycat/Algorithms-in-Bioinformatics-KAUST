"""
@BY: Yang LIU
@DATE: 10-11-2020
"""


# Input: A collection of strings Patterns.
# Output: The adjacency list corresponding to Trie(Patterns), in the following format. If Trie(Patterns) has n nodes, first label the root with 0 and then label the remaining nodes with the integers 1 through n - 1 in any order you like. Each edge of the adjacency list of Trie(Patterns) will be encoded by a triple: the first two members of the triple must be the integers labeling the initial and terminal nodes of the edge, respectively; the third member of the triple must be the symbol labeling the edge.
def trie_construction(patterns):
    trie = {}
    existed_node = [0]
    for pattern in patterns:
        current_node = 0
        for i in range(len(pattern)):
            current_symbol = pattern[i]
            end_node = [i[1] for i in trie.keys() if i[0] == current_node and trie[i] == current_symbol]
            if len(end_node) > 0:
                current_node = end_node[0]
            else:
                new_node = max(existed_node) + 1
                existed_node.append(new_node)
                trie[(current_node, new_node)] = current_symbol
                current_node = new_node
    for node_pair in trie.keys():
        start = node_pair[0]
        end = node_pair[1]
        symbol = trie[node_pair]
        print('%i->%i:%s'%(start,end,symbol))
    return trie


def prefix_trie_matching(text, trie, leaves, pattern_length):
    
    i = 0
    symbol = text[i]
    v = 0
    pattern = ""
    while True:
        w = [i[1] for i in trie.keys() if i[0] == v and trie[i] == symbol]
        if v in leaves:
            return pattern
        elif len(w) > 0:
            # print(i, symbol, v)
            pattern += symbol
            i += 1
            if len(text) == pattern_length and i == pattern_length:
                symbol = text[-1]
            else:
                symbol = text[i]
            v = w[0]
            # print(v)
        else:
            return "no matches found"


# Input: A string Text and a collection of strings Patterns.
# Output: All starting positions in Text where a string from Patterns appears as a substring.
def trie_matching(text, patterns):

    pattern_length = len(patterns[0])
    trie = trie_construction(patterns)
    start = [i[0] for i in trie.keys()]
    end = [i[1] for i in trie.keys()]
    leaves = [i for i in end if i not in start]
    position_idx = 0
    positions = []
    
    while len(text) >= len(patterns[0]):
        # print(text, position_idx)
        # print(prefix_trie_matching(text, trie, leaves, pattern_length))
        if prefix_trie_matching(text, trie, leaves, pattern_length) in patterns:
            positions.append(position_idx)
        position_idx += 1
        text = text[1:]
    return positions


if __name__ == "__main__":   

    patterns = ["ATAGA", "ATC", "GAT"]
    trie_construction(patterns)
    # result = trie_construction(patterns)
    # with open("D:/bioinformatics homework/chapter9/result.txt", "w") as Output:
    #     for node_pair in result.keys():
    #         start = node_pair[0]
    #         end = node_pair[1]
    #         symbol = result[node_pair]
    #         Output.write('%i->%i:%s\n'%(start,end,symbol))
    print()
    text = "TGGTCAAACCAGGGGGGATACCCTGAGAACATGTCCACCAGCTAGAGCTCGGTAAACAGAGAAGTTGGAATCAGTGGACCTCTCTTCGCCACCGGCAAGCGTACATCTGCTATGAGTGCTCCAGTTCGCGTCTTCAGCGCCTTGTCGTCACGGACCGCCTTACCACAGGGCTTATCCCGTGGAATACACCGAGGTATGTGTACTCCACTCTCGAACCCTTCGTTGTAATATAGTGGGACGGTTCGTGTGTATAGCGCCATGACGAGACGTGAATGTTTCGCCCTGCTGTTTGTTTGAAACTGGGCTCGTACCCCGGGGTCGGAGTTTATGAGAAACTCGAAAGAGACTTCTACTCGGGACAGCTCTAGATGTCGTCTCAATCTATCTTGAACGGCGCGAACTTCCACAGATATGTTTCTTCTGGAAGATTAATCGACAGCATGGACACCTAGTCAGAGCATTTGCCAACCGCAGCCGACCGCGTGCAAAGGATCAATACACGGCAACAACCTCAGTCGTACGTCAGAAGACGTGATAGCCTCCATCTTAGTGTGAGTAGAATGCTCCGCGGCAGGTGAGATCCAGAGTGCAAATTGACGATATTGTTGTAGGCTGCCGATTAGTCCATGCAATGTCGTGACTCCACATGCGCTATACATGACGACTGTATATTGGAGACGTTTCAATATTAGCGGGCACCTGTCGTGGGTAGGGCACATGCGTGCGTGGTAAGTCGTACGTTACGATAAGTGATCGTTTGCCATACCAAGCACAACAATCTCCCCTACGCCCATTCACAACCGGGGCTATGGGTCTATCTGGACATTGGGCTGTTTCTGTCGACAGAGTAATCGGGTTATATCACACGTATGTAATAAAGATCCAAGTTATTGGCCGTGAATTCCCTACGCCTAAGCCAAACTAATATAGATGCGCATCGCGGTTCGCGCAGTCGCGAATGCTCGTGATGCGACTGAGTCTTACTACAGTACACATGTCGAAGCGTGCGAACATCGAGCGCGACAGGTGACGTTAGACGAGTATTTACTGGCAGCCGCCTCGACTCTCGCGAGCTGAAAACTTGCAGGGGTCTAGCACCCAAGCTGGAGGTGCGCGAAGCGACCTGGCAAGCAATAGTCAAGGGCAATGCATGGTAAAGTGCTGACCATCTTAGACGTCTTTGTCTTAGCCCCTGTTCCTGCATGACGGAGCTATAGTCTGTACCTACCCCCACACCGAAACACCAAGTCCCTCTCACCAATGACATAGAGTTTGAGGCGTCCCAAATACGACTAAAGTTCACAACGTAGAGCGCGGCCGTACCCTTTCGAGCAGCCTGGGAGACGGGTTCAAATGGGCATCAGTTCCTAGTATGACCTCACAATTACTTGGCCGAATAAATCCGGGGCGGACTAACTCCCCAAGCCTAGGGAACTCGTGGAGGTGGCTGGAGTACAGGATGCGCCGTGGTGGCTGGTGGCTGGCCCAAATCGATATCTCACTATTCCCTCCTTTGGGTTAAATGCTAATTGGCTAATAAGCTTGGCCCAATAATGCTTTCGTTATCTCTTCTCTTGAGGCCAGCAGCTGTGGATCAGACGGTGTTAAAGGCCGAGACGGGGCGGACCGTTACCAGGTAATTTTCAAGTTCTGAAGGACACATCTAATAGGGCTTCAGATTGTCCTTAGCAGAGATCAGGAAGATTCGAACGAGCAACCGTGTGGAGGGTAATTGCACCCCTTCACTTGCTCCATCGATGTCGAGAAGCAAGCTCCTTATTTTGCATGACTACCGCTGAGCGGTCAGTAGTCCCACGAAGGGGGTATTGGAGGTCCCAATCGCAGATTGCGTACTTGCGAGTAATCAGGCTTCTATGCGACAATTGCCCACAGATACGCAACGTTATATATGGATTGTCACGACCACGCAGATCTGCATCGGGTAACATCTCCCAGCGAGCACGCACAGCAAACCGTCGGATGAATGGGAATCGATAGGCTTCTTTAACGGCTGCGATTTCCATGCTGCTAATGCAGGGGAACAAACAACAAACAACAGACTTGAGACGACCCTAAATCATCGAGTGCAATCAGTGTAATAGCGTCCTATGAGCTCACGGCCCGTGACATTCCCCAGTGTGCTGTTAAACTCCAATAAACCCCCAACCTGAAAGTGATATACCTCGAATCAGGCAATCGGGTTTAGACTAATAGCGGCACGGGTAACTGTAGTAGAACCTCTGAAGAACGCTACGTTACGGACGTCCTTTACGGATATACGCTATCTTTCGCCCAGGGCCTTATTCAGGAGCGGAGCCACTTGAAAGATTGTGGCTGTGATGGTCATCTTCGATCGCTGCCAGCTGGTCTTCATTTTTAGACATGCCTCAGAGGAGTACTCGATAAACTATTGGCAGCTTATAGAACGCTGTCTGTGATGTTCAGTTCGGTGGGAAGTCGCTCCCTTCGTGACTCAGGGTTGACACGCAGGCTTGCCGGCTATACAGACATCGCCATAAGGCGTGTACATCCGCCTAGATCAACTATCACGAGAGGACACCACCAAAAGCGAGCGTCCGAGAGACCTTACTTCTATGGCTAGTAGCTCTCGCCAAAAAAAAAAACCGCATCTCGCGTCGCCACACTGAACTCTTGTTTATTGTTTACCCGCCATAATTATCCAATTTTCGGGCCCAAGGTTCGAAGATGACATAGTTGTGAGGACGGTCTGAGGGTACATAGCGTGTCCTTTTACAACTTAGATTCGACCGCTATTACGGCACGTTAATTCATACAGAGTGGGCTGACTTATGGTGTCTCGACCGAGGAAGCGAAGGTGTATACAACAGACGCGAAAGGGGCTGAAGAGCCTCTCAGAAGTTCAGTCGTACGTCGTACGTGAAATTTATAGTGAGTATCGGAGCGTGGTAGTCTTGATTTCCGTGGCCGTTTCCCGTACCCCGCTAATTGCTGCGGTTCTAGAGATTGCACACACTTTGCGCTAGACATCTGTCACTGACGGCACTGTACTGGCTTCTATGTTGAACTCTCAGCCTAGATCGTCAATCTGCCTGATTCCATTCGAGTTCACACCGGAAGAGTTTGGCCTCGGATTTAGCAGGTCGGCGGCTCTGGCGTTAATGTCAGGGCAACTGATGCGGAAAGCTTGGTAAGCTAAAGCGGACGAAGTAAAACGGTCGCGACACCCTATGGACGTACTAGGTGTATGTCCGGGTAATCGCAGGCCCCTTACCCTGTTGGACGGTTCATATCCGGCGGAATCACGTATCCTCTATCACGACCCGGGACTCTGGGACATTAATCATCGAAGATCAGAGATGCATTATGCAATAGACAACAGCGATGAGACGACTGTCTCCCTTATTTATAGTCTGTAGTCTGTATAATAGAAGCTGATAGCTGCGCGGCATGGGGATTGTCCAACAAGCCGGTCTCAACTGGGGACGTGTTCCTTAACCCACGACGCCGGGTACCTCGGAACAATATCTGAATAGCAAATAGCGCGTGCCTCTTCTCTCTTCTCTCGCATGCCATTCGTGTGCTTTGCACGCTCGGCTTGCCCGGGGTCGGTGGGTATCTTAATCGTAGTGATTTCATCCTCGATTAATTCGCCTCGGGATAAGATCTGGCACTTACCGACGTTGTATGTGGTAGCGATACGGTGGACAATTCGTAAGACGAGACCTAACTGCGCATCTCCCCTACAATTCACTCGCGAGTGCCCCCGGCGAAAGCGTGCCAGGATAAGAATGTGGTCGGGTGCAGCTACCTACGGAGTGAACAAACAACAAACAACCTACATACTGTAATAGCCGTAACCCCGGAGGTGGTTTACGGGTTTTTGGTATCGCTTGAACGATGTGGCGGCCTTCCAATTCATCACGGGTGCGGAGTTTTGAGCCACGTGGCATGGAACTGGATGCCAGGACGCCGTTGCCCATGACGGAGCGTGTACTCAGTGCGAGCAGTAAACAAACAACAAACAACACAAATAGCCGAGAAAGATTTGTACCCCTTATATAGATGACAATTGACCGAAGTAATAGCCAGGCACATCTTACGGGTGTGTATTGGCTGCAAAAATGATTTCGTTGTCGGAGCCGAGAAGCTGATAGTTGCCAACACATGCCTTCACTTAATGATTAATTGGCATAGTTACGCCCCCTAGCCGACTATAGTCGTAAAACGACGGTCCACAATTAAACGGAGGATGGTTTAGCGCCGTAATTACTGTAAGGTGCCAAAAGTGCCTGCGGATCGTATACTAACGGGGTCTAGCTGATGATCGCGACGACAGCAAGGACATCCCAGGTAGAACCGCCGCAAAACACGCGCACGCGGCGTATTACCCACATAATCGAGCTGCGCAACGTGGCTTGATCAAGTGGCTTCGGGCATGTACCGCCGCAGTTTGTTTTAGCTTCAAGCCGTCGGCTACTGTAGACTAAAGTGGACCATCGAATCCGCAAGATACCATCAGATTCGATGTAGCAGTCTAAGGATATTCTTGGCCTCCTTCCCCTGGCTAGTCCACCCTAGGTGGTACGCCTGCTTAGTGCATAAGCTTCATTTTTCATTGAATGCCACACGATAAGATATTGCTCGAAAATGAATTCCAACGGCTTGGTGTTATGTCGGTTCATGACTGCGACCCATCTCCTTCAGGTAAATGCCTCTACCGCTCCGTTTCCATTGGAGTCATGACGCTGAGGGTGGTCATTAAGTGTTCAACACGCTGCGGTCGTACGTCCCTAATGAATGAAGCTGATTAGATGTACGGGTACTACGAAGGAGATGTTGGGGGGCCCCATAATCTGTCGTTGGGATGGCTGCGTGGACGGGTCCGTACCCTAATCTTCACCCAAGCGTATAAGGATAGCCGGGACAGTGATACGTAGTGTATCTGAAAGTTAAAACCATGTAAACAAACAACAAACAAACCCTGCTATTTCATGAAAAGCCCAGCAGCGCGCCCCGTCACCCTGTAGTGAAGCCTACGAGTTATTCCCCCTGCCGCCTGTTGGGGTGGGTCAGCATTACAACATCGAGGTTGGAGTGGCCATCTGCGTTTCTGCAGCTCCAGGTGGCTGGTGGCTGGATGCGCCTTCAGATACTGGTGGCTGGTGGCTGGAAAAGGACTAGAGTAAATCTGGGCTCCGGTCGACTGTATCATGCGGCAGAAATGTATCGCTTCTGTGCCCGGGCACGTGCTCAGGATAGAATTGGGCAGTGTTCGGAAATCCCTTCTAGGCCGATAGGTCGTCTTATTTTAACCATTCATGGCCTGATGGCTCTTAGCGTCCACAGGAGGGGCCCTGGTTATTTTTTAATCCTAAGGAATGATGCATATAACGCCCCTTGCAACGGATGAGACCGTTGGCATTTATACGCGACTGCACTTTACGGAGTGCCGAAAGAGGGGAGAACGAACCCAATCTACCACTACATGCCAGTCGTCACGGGGATACGGCGAATTCAAGACCGGAGAGAGCGACCCTTCTTTATTTCAACCATTATTAACGAATCGGTGGTATGTACCCAGACAGGATGACTTTGAGATTACTGTATGAAGACAGTTTATAGATAGGCCCTTGACGTCCGGAGGCGAGCGTAATCGTGGACCGTGATTGAGCTCAATAAGTCGCTTGGATACGGAGGTGACAGCAGATGCTTGTAGGCGGCGCCGCAGGTTTCGAGATTTAGTCTGTAGTACCCGAGCCTTTACCGGCCACCTGTTCCGTAGAGCATAAACTTTATCGGGTACGCACAAATTGTGGCCGCTTGGACCCACCGCTGCTTGCATCTGCTGTAGTGTCGCCATACCGCCCTGTCTTCCCTGATTCTTCGAACATTGCCCCCCTAGGGCAGGGCTTACTTTTATCGTAGTGCGATTGATATAAGTATGTTTCACCTCCTGGCACCTAAAATACAACGTAAACCATCAACAGCAACTGCCCAATGGTCCGCTCTTAGCACTGGACAGCTAAGGGTAACCGCTGAGTTTTACCACAAAGAATACGTAAGCGGACTTTCTTCGGCCGACTCAATTTCCCGTCGCTCGCGGTCCAATCAGGTGACCCATTCCCCAGACGTCCGATCCGAAAACTCAATTTCTTTACGACTGGGGCGGCTTTCGTTTAATTCTCATACAGGACCTGAGGGTTGCTTTTGTAGTTTTCCTCAATGCCCCGTTTGCCGGCGATGGGGACCTGGCCAAATTCTCAGGCGTGCACCATACTTGTACCTCTTCTCTCTAGAATTCCGCTCGAGAACCGCCCCTGGTATTTGAACAGCAACGAGCTAGTTTCACATGTGTACAGGGCACACTGCGTAATTGATGGTTTTCCACAGTATAACCTGGTGCCTCGCTACAGGTAGGACCGTAGGGTCCTCTCCATCCCAAGAGCTCGTCTAATCTAAAAAGATCCTCCTCCGTTACGTCACGCGCTGGAATTGTTAAACTTGAACATAGTTACATACACAGTTATTGTCCAGGTTGCGTAAGGGTGTTCTTTATGAGAACGTTCCACTGTTTCGTTACTCCTCTTCTCTCTTCTCTCAAAAGGCTGAAATTCCGTTTAGCCGGATACAATGTTGTGTCTTGAATTGGTACCTGTAAAAGTGTCTCTTAGTCTATCAAATACTGGTTGTTCCTAGCGCGTTATGAGTTGGGCTCCGTATGGCTCGGGCGTTCTTGTGTCCGGAATATCATGGAACGCTCCGGGCAGTGCATGGGCAAACAGTAACTGATCGCCGTTAGGTTTTTACGAGCAGGACCGTTCTGAGGGCCATTCCATGGCCCAAACAAGATATGTTAAATGGACGTATTGCTCGAGGTTGTACCAAGCCGGAATAAATATAGAATCGTGGGTAGGTTCTTCGTGTGCTGGTTTAAGTACAAGCGGATTCGCCTATTTGGCGCAATAGCGGTAGCCCCACTGTAACTGTATTCACTACGATTCGTCGGCGTGGCTCTTAGAAGAGGGTTTTTTAGCTGATAGAAAGCCGCTCGGTTCGATCGAGAGAGAGTGCAGGAGCGTTCTTAGTCTGTAAATTACCAGAGCTGTGGTTTGACCGTCCTTCTAGCCCAATAGAATCTCGGACGCAGCCGATCAGAATTCTTTCTCCCCTAAGGCAGTGCGGTAACGTCTAGCTTTTGTTCTCGAAGAAATTTACGACCAGCAGTAGGAGTCCTCCTACGCCTAACGACAACGGATCGTGCTGGAATCGGCCATTGGAAGCCCACAGTGGGCCAACAGGCTACCCATCGGATACTGTGCTCAGAAGTTGCCGGCACGGGAAATGGTTGTAATTTGCCCCTTATTTCACACGATGCCACGTATCTGTCATAGGGCATACCGCGGAAACCATGTCCGGCATGACGCTTAGTAGCAATGGTTAATTCCTTTTTGACAGGAAAACTGGTCTCGCTGGGAGAGAGTCTGCGCTGTGATCTCATGTGGTAAAGACGGCTCTCTCACTGGTGCCCATGGTGGCTGGTGGCTGGACCCAGGTCTAACATTGAGGTAGGTATACTGTACTCCTGGAAATCAATGCACTTACAGCGGGGGGCCAAAAAATGACGCAACCAGTACCTCGGAGTGCTCGGTGTAACTCATAGGGGTTGCCCAGCGTCATCTGATATACATACCCCAGCCGACTGAATACCCGCAATGAGATGGAGTTTACGTCGTTAATCTGTACAATATGCTTACGTGGGGCAGAGCATGGATAATTGAAAAGACGTTCAGCTTTTAGTCTGTATCCGCTAGCTGCGGGCACAGTGCCCGCGTAAATCGCAAACGGCTCCTTCTCATCCACCCCACATTTTCAAGCATGAGACGTACTCTGTGTACGGGCGGTTCATGTAATAATTTCCCGCGCACCCTTCGGGACCGGCAGGAGGGGTGCTTGGTTTTTAGGACGTTAGCTGGGGGAATCGGACTTGCTCGTCCGGCACCTTCTTATAAGAAGGTGGTTTCATGTTCGATAATTCACTGGATTGCTGCGCCCCTACACATAGGGGACCAACCGAGCCCGTGCGTTCACGCGAGGCCATAGGGACCCGAGTCAGCTGGGCGGTCAAATGGACAGGCAACCATGGCCTGACGATTACATGATGGAGCGGGATCTCTATTTAATCGCCGGCTCTTCTCTCTTCTCTCATCAATCTCATTTCCTTCAAGGACGTATCTTATTTATCGCCACCAACTGATCGTGCCGAGACGAGGCAATTTATGATAGAGCTAAGACTTTGTCTGGAGCGGTCGTACCGGATTTAGCATTGTAGCACCGACACGACCCAACAGAGGTATGGACCGCGACTAGGCATGCTTCATATGGCGGTCGGGGTAATAGTGGGCTACACGCGCACGAGCTGATAGTTCCGCGCGTCGTTGGCTGCTACACAGTGGCAACTCGTGTTTCCTTTAGCGACAAGCCGTTAATTTGTAGGCAGCCGTCGTTTTAACGGTATATGGTGCACGTCGTCGCATCGCTAAGGGCGAGGGTAGGTAGAGGGAGCCAAGTAATAACGACGCCTTCGATGCATGGCGTATTTCATTTTGTAGGCGACCTTCACGCTTTAAGTTTGGAATTGACACTGCCGGTTCACCTAGTAACTGCAGGAAGTGGACGTTGCAAGACTGCGCCACACCCCTCGGGCTATGGGCGTTTATCTATGCGGAACATTGTCTTACAAACTTTTAGACTAACTCTAAGCGTACTGATTCACCTGGTCCACCGATCTCTAAATACTTTTCGCAAGCAGTCGCTTGTGCCGGGTAACCTCGAAAAACTGGCGTGAGAGGAGAGTCGAGGACAAAGATGTTGTAAACTGTACTAAAGCACAGTTAGGTGATAGC"
    patterns = ["AACAAACAA", "GTCGTACGT", "GGTGGCTGG", "TAGTCTGTA", "CTCTTCTCT", "AGCTGATAG"]
    print(trie_matching(text, patterns))
